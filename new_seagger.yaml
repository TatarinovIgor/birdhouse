swagger: '2.0'
info:
  title: TronAccountAdapter
  description: description
  version: 2.0.0

schemes:
  - http
basePath: /api/v1/crypto/tron

tags:
  - name: info
    description: information about accounts type, create account
  - name: accounts
    description: change account settings, account information
  - name: transactions
    description: information about positions, history of trades and balance operation
  - name: balances
    description: balance operations deposit/withdrawal/bonus - callback
  - name: streaming
    description: create stream

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
  QueryToken:
    type: apiKey
    in: query
    name: Authorization
  QueryStreamingToken:
    type: apiKey
    in: query
    name: stream-auth

definitions:
  info:
    type: object
    additionalProperties:
      type: object
      properties:
        description:
          type: string
          example: 'custodial account to store key in the backend'
        is_generated:
          type: boolean
          example: false
        fields:
          type: object
          additionalProperties:
            type: object
            properties:
              description:
                type: string
                description: A description of field to show to user
                example: 'name of account'
              choices:
                type: array
                items: {}
                x-omitempty: true
                description: A list of possible values for the field
                example: [ 'Main' , 'Not Main']
              optional:
                type: boolean
                description: false if not specified
                example: false
  instrument:
    required:
      - symbol
      - issued_by
      - digits
    properties:
      symbol:
        type: string
        example: "USDT"
      issued_by:
        type: string
        example: "TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t"
      digits:
        type: integer
        example: 6
  fields_custodial:
    required:
      - external_id
    properties:
      external_id:
        type: string
        description: external id reference for account
        example: '91e05248-25ef-4468-a201-820154ffd65e'
      name:
        type: string
        description: name of account
        example: "Main"
  fields_non_custodial:
    required:
      - external_id
      - is_generated
    properties:
      external_id:
        type: string
        description: external id reference for account
        example: '91e05248-25ef-4468-a201-820154ffd65e'
      name:
        type: string
        description: name of account
        example: "Main"
      is_generated:
        type: boolean
        description: should account be generated
        example: true
      public_key:
        type: string
        description: a public key for the account in case of 'is_generated' == true
        example: "TSoELzXozUgWT2LJyY8UhzDfSzxecdYEdP"
  balance:
    required:
      - amount
    properties:
      amount:
        type: number
        description: available amount for the asset
        example: 1.1
      asset:
        $ref: '#/definitions/instrument'
  account:
    required:
      - external_id
      - is_generated
      - account_id
      - balances
    properties:
      external_id:
        type: string
        description: external id reference for account
        example: '91e05248-25ef-4468-a201-820154ffd65e'
      is_generated:
        type: boolean
        description: a flag to show if account was generated by system
        example: true
      account_id:
        type: string
        description: external id reference for account
        example: 'TVG3YKyMUe59zKe7nNUtFMGefQMbcrbowm'
      balances:
        type: array
        items:
          $ref: '#/definitions/balance'
  created_custodial:
    required:
      - external_id
      - account_id
      - name
    properties:
      external_id:
        type: string
        description: external id reference for account
        example: '91e05248-25ef-4468-a201-820154ffd65e'
      account_id:
        type: string
        description: external id reference for account
        example: 'TVG3YKyMUe59zKe7nNUtFMGefQMbcrbowm'
      name:
        type: string
        description: a name of account
        example: "Main"
  updated_account:
    required:
      - name
    properties:
      name:
        type: string
        description: a name of account
        example: "Main"
  created_non_custodial:
    required:
      - external_id
      - is_generated
      - account_id
      - name
    properties:
      external_id:
        type: string
        description: external id reference for account
        example: '91e05248-25ef-4468-a201-820154ffd65e'
      is_generated:
        type: boolean
        description: a flag to show if account was generated by system
        example: true
      account_id:
        type: string
        description: external id reference for account
        example: 'TVG3YKyMUe59zKe7nNUtFMGefQMbcrbowm'
      name:
        type: string
        description: a name of account
        example: "Main"
      recovery_phrase:
        description: a secret phrase for recovery of a private key for a generated non custodial wallet
        type: string
        example: "army, energy, fabric, lucky, opera, stereo, trash"
  transaction:
    required:
      - id
    properties:
      id:
        type: string
        description: transaction id
        example: '21112'
  transaction_info:
    required:
      - id
    properties:
      id:
        type: string
        description: transaction id
        example: '21112'

paths:
  /info:
    get:
      summary: get a list of accounts type and fields required to make account
      tags:
        - info
      produces:
        - application/json
      responses:
        200:
          description: list of supported account types and fields required to make an account
          schema:
            $ref: '#/definitions/info'
        500:
          description: method is not able to get all required information from config
  /accounts/custodial:
    get:
      summary: get information about instruments available for account type
      tags:
        - accounts
      produces:
        - application/json
      responses:
        200:
          description: list of instruments available for account type
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/instrument'
                }
        500:
          description: method is not able to get access to a list of instruments
    post:
      summary: create an account
      tags:
        - accounts
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: body
          name: ''
          schema:
            allOf: [
              {
                $ref: '#/definitions/fields_custodial'
              }
            ]
      responses:
        200:
          description: an account was successfully created
          schema:
            allOf: [
              {
                $ref: '#/definitions/created_custodial'
              }
            ]
        400:
          description: bad arguments in the request, account is not available for creation
        500:
          description: method is not able to make new account
  /accounts/custodial/{accountid}:
    get:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
      summary: get information about account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: information about account and its balance
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/account'
                }
        500:
          description: method is not able to get information about account
    put:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
        - in: body
          name: ''
          schema:
            allOf: [
              {
                $ref: '#/definitions/updated_account'
              }
            ]
      summary: update information for account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: information about account and its balance
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/created_custodial'
                }
        500:
          description: method is not able to get information about account
    delete:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
      summary: delete account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: account was deleted
        400:
          description: account can't be deleted according internal rules
        500:
          description: account can't be deleted due to internal error
  /accounts/non-custodial:
    get:
      summary: get information about instruments available for account type
      tags:
        - accounts
      produces:
        - application/json
      responses:
        200:
          description: list of instruments available for account type trading
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/instrument'
                }
        500:
          description: method is not able to get access to a list of instruments
    post:
      summary: create an account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      parameters:
        - in: body
          name: ''
          schema:
            allOf: [
              {
                $ref: '#/definitions/fields_non_custodial'
              }
            ]
      responses:
        200:
          description: an account was successfully created
          schema:
            allOf: [
              {
                $ref: '#/definitions/created_non_custodial'
              }
            ]
        400:
          description: bad arguments in the request, account is not available for creation
        500:
          description: method is not able to make new account
  /accounts/non-custodial/{accountid}:
    get:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
      summary: get information about account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: information about account and its balance
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/account'
                }
        500:
          description: method is not able to get information about account
    put:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
        - in: body
          name: ''
          schema:
            allOf: [
              {
                $ref: '#/definitions/updated_account'
              }
            ]
      summary: update information for account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: list of instruments available for account type
          schema:
            properties:
              instruments:
                type: array
                items: {
                  $ref: '#/definitions/account'
                }
        500:
          description: method is not able to get information about account
    delete:
      parameters:
        - in: path
          name: 'accountid'
          type: string
          required: true
      summary: delete account
      tags:
        - accounts
      security:
        - Bearer: [ ]
      produces:
        - application/json
      responses:
        200:
          description: account was deleted
        400:
          description: account can't be deleted according internal rules
        500:
          description: account can't be deleted due to internal error
  /transactions/custodial/{accountid}/info:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    get:
      summary: get a list of transaction for the account (trading and balance) in specified time interval GMT
      tags:
        - transactions
      security:
        - Bearer: []
      parameters:
        - in: query
          name: from
          type: integer
          description: unix time in ms
          required: false
        - in: query
          name: to
          type: integer
          description: unix time in ms
          required: false
        - in: query
          name: isAsc
          type: boolean
          description: sorting type
          required: false
      produces:
        - application/json
      responses:
        200:
          description: list of transactions
          schema:
            properties:
              transaction_list:
                type: array
                items: {
                  $ref: '#/definitions/transaction'
                }
        400:
          description: bad arguments in the request, {accounttype} or {accountid} is not available
  /transactions/custodial/{accountid}/info/{transactionid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
      - in: path
        name: 'transactionid'
        type: string
        required: true
    get:
      summary: get detail information about specified transaction
      tags:
        - transactions
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: transaction information
          schema:
            allOf: [{
              $ref: '#/definitions/transaction_info'
            }]
        400:
          description: bad arguments in the request, {accounttype}, {accountid} or {transactionid} is not available
  /transactions/custodial/{accountid}/positions:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    get:
      summary: get a list of open positions for the account
      tags:
        - transactions
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: position information
          schema:
            allOf: [{
              $ref: '#/definitions/position'
            }]
        400:
          description: bad arguments in the request, {accounttype} or {accountid} is not available
  /transactions/non-custodial/{accountid}/info:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    get:
      summary: get a list of transaction for the account (trading and balance) in specified time interval GMT
      tags:
        - transactions
      security:
        - Bearer: []
      parameters:
        - in: query
          name: from
          type: integer
          description: unix time in ms
          required: false
        - in: query
          name: to
          type: integer
          description: unix time in ms
          required: false
        - in: query
          name: isAsc
          type: boolean
          description: sorting type
          required: false
      produces:
        - application/json
      responses:
        200:
          description: list of transactions
          schema:
            properties:
              transaction_list:
                type: array
                items: {
                  $ref: '#/definitions/transaction'
                }
        400:
          description: bad arguments in the request, {accounttype} or {accountid} is not available
  /transactions/non-custodial/{accountid}/info/{transactionid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
      - in: path
        name: 'transactionid'
        type: string
        required: true
    get:
      summary: get detail information about specified transaction
      tags:
        - transactions
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: transaction information
          schema:
            allOf: [{
              $ref: '#/definitions/transaction_info'
            }]
        400:
          description: bad arguments in the request, {accounttype}, {accountid} or {transactionid} is not available
  /transactions/non-custodial/{accountid}/positions:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    get:
      summary: get a list of open positions for the account
      tags:
        - transactions
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: position information
          schema:
            allOf: [{
              $ref: '#/definitions/position'
            }]
        400:
          description: bad arguments in the request, {accounttype} or {accountid} is not available
  /balance/custodial/{accountid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    put:
      summary: update balance for the account by specified amount, the methods will put in comment “deposit” if amount > 0 and “withdraw” if amount < 0
      tags:
        - balances
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: ''
          required: true
          schema:
            type: object
            required:
              - amount
              - asset
              - transaction_ext_id
            properties:
              amount:
                type: number
                example: 53.1
              asset:
                type: string
                example: usd
              transaction_ext_id:
                type: string
                example: '3ff098bc-ebd0-4db5-8d01-4676690d2ca4'

      produces:
        - application/json
      responses:
        200:
          description: balance was changed
        400:
          description: bad arguments in the request, {accountid} is not available
        500:
          description: internal server error
  /balance/non-custodial/{accountid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    put:
      summary: update balance for the account by specified amount, the methods will put in comment “deposit” if amount > 0 and “withdraw” if amount < 0
      tags:
        - balances
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: ''
          required: true
          schema:
            type: object
            required:
              - amount
              - asset
              - transaction_ext_id
            properties:
              amount:
                type: number
                example: 53.1
              asset:
                type: string
                example: usd
              transaction_ext_id:
                type: string
                example: '3ff098bc-ebd0-4db5-8d01-4676690d2ca4'

      produces:
        - application/json
      responses:
        200:
          description: balance was changed
        400:
          description: bad arguments in the request, {accountid} is not available
        500:
          description: internal server error
  /bonus/custodial/{accountid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    put:
      summary: update balance for the account by specified amount, the methods will put in comment “bonus deposit” if amount > 0 and “withdraw deposit” if amount < 0
      tags:
        - balances
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: ''
          required: true
          schema:
            type: object
            required:
              - amount
              - asset
              - transaction_ext_id
            properties:
              amount:
                type: number
                example: 53.1
              asset:
                type: string
                example: usd
              transaction_ext_id:
                type: string
                example: '3ff098bc-ebd0-4db5-8d01-4676690d2ca4'

      produces:
        - application/json
      responses:
        200:
          description: balance was changed
        400:
          description: bad arguments in the request, {accountid} is not available
        500:
          description: internal server error
  /bonus/non-custodial/{accountid}:
    parameters:
      - in: path
        name: 'accountid'
        type: string
        required: true
    put:
      summary: update balance for the account by specified amount, the methods will put in comment “bonus deposit” if amount > 0 and “withdraw deposit” if amount < 0
      tags:
        - balances
      security:
        - Bearer: []
      consumes:
        - application/json
      parameters:
        - in: body
          name: ''
          required: true
          schema:
            type: object
            required:
              - amount
              - asset
              - transaction_ext_id
            properties:
              amount:
                type: number
                example: 53.1
              asset:
                type: string
                example: usd
              transaction_ext_id:
                type: string
                example: '3ff098bc-ebd0-4db5-8d01-4676690d2ca4'

      produces:
        - application/json
      responses:
        200:
          description: balance was changed
        400:
          description: bad arguments in the request, {accountid} is not available
        500:
          description: internal server error
  /stream:
    parameters:
      - in: header
        name: Connection
        type: string
        enum:
          - Upgrade
        required: true
      - in: header
        name: Upgrade
        type: string
        enum:
          - websocket
        required: true
    get:
      summary: get an uri to open stream for the account
      tags:
        - streaming
      produces:
        - application/json
      security:
        - QueryStreamingToken: []
          QueryToken: []
      operationId: "ws-mt5"
      responses:
        500:
          description: "Internal server error"
        400:
          description: bad arguments in the request, {accountid} is not available